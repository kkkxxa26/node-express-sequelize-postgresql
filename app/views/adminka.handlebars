
<body>
  <!-- Шапка -->
  <header>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/modal.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  
    <div class="header-left-text">Админ-панель</div>
    <div class="header-right">
      <div class="user-avatar">
        <i class="fas fa-user"></i>
        <div class="site-header">{{user.dataValues.name}}</div>
      </div>
      <div class="logout-icon" onclick="handleLogout()" title="Выйти">
        <i class="fas fa-sign-out-alt"></i>
      </div>
    </div>
  </header>

  <!-- Кнопки переключения секций -->
  <div class="nav-buttons">
    <button class="nav-btn active" data-section="users-section">Пользователи</button>
    <button class="nav-btn" data-section="lectures-section">Лекции</button>
    <button class="nav-btn" data-section="tests-section">Тесты</button>
    <button class="nav-btn" data-section="stats-section">Статистика</button>
  </div>

  <!-- Контейнер для секций -->
  <div class="section-grid">

    <!-- Секция пользователей -->
    <div id="users-section" class="section active">
      <h2>Список пользователей</h2>
      <table id="user-table" class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>ФИО</th>
            <th>Email</th>
            <th>Телефон</th>
            <th>Дата рождения</th>
            <th>Пол</th>
            <th>Роль</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <!-- Секция лекций -->
    <div id="lectures-section" class="section" style="display: none;">
      <h2>Список лекций</h2>
      <table id="lecture-table" class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Заголовок</th>
            <th>Описание</th>
            <th>Дата создания</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>

      <!-- Кнопка добавить лекцию -->
      <div class="table-footer">
        <button id="add-lecture-btn" class="floating-add-btn">Добавить лекцию</button>
      </div>
    </div>

    <!-- Секция тестов -->
    <div id="tests-section" class="section" style="display: none;">
      <h2>Список тестов</h2>
      <table id="test-table" class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Заголовок</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>


      <!-- Кнопка добавить тест -->
      <div class="table-footer">
        <button id="add-test-btn" class="floating-add-btn">Добавить тест</button>
      </div>
    </div>


<!-- Секция статистики -->
<div id="stats-section" class="section" style="display: none;">
  <div>
    <h2>Статистика</h2>
    <table id="stats-table" class="user-table">
      <thead>
        <tr id="stats-header"></tr>
      </thead>
      <tbody id="stats-body"></tbody>
    </table>
  </div>
</div>

  <!-- Модальное окно формы -->
  <div id="form-modal" class="modal-overlay" style="display: none;">
    <div class="modal-window">
      <h3 id="form-modal-title">Форма</h3>
     <div class="modal-content">
        <form id="entity-form">
          <div id="form-fields"></div>
          <div class="modal-actions">
          <button type="submit" class="modal-btn primary">Сохранить</button>
          <button type="button" class="modal-btn" id="form-cancel">Отмена</button>
          </div>
        
        </form>
     </div>

    </div>
  </div>

  <!-- модалка редактирования теста -->
  <div class="modal-overlay" id="editTestModal" style="display: none;">
  <div class="modal-window">
    <h3>Редактирование теста</h3>
    <div class="modal-content">
      <form id="editTestForm">
        <input type="hidden" name="testId" id="editTestId">
        <div id="edit-question-container"></div>
        <button type="button" class="add-answer-btn full-width-btn" id="add-question-btn">+ Добавить вопрос</button>
      </form>
    </div>
    <div class="modal-actions">
      <button type="button" class="modal-btn" id="editCancelBtn">Отмена</button>
      <button type="submit" class="modal-btn primary" id="editSaveBtn">Сохранить</button>
    </div>
  </div>
</div>



  <!-- Модальное окно подтверждения удаления -->
  <div id="confirm-modal" class="modal-overlay" style="display: none;">
    <div class="modal-window">
      <p id="confirm-message">Вы уверены, что хотите удалить?</p>
      <div class="modal-actions">
        <button id="confirm-yes" class="modal-btn danger">Удалить</button>
        <button id="confirm-no" class="modal-btn">Отмена</button>
      </div>
    </div>
  </div>

  <!-- JS логика -->
  <script>
  
  let currentEditTestId = null;
  // Открыть модалку и загрузить данные
  $(document).on("click", "submit", function () {
  const testId = $(this).data("id");
  currentEditTestId = testId;
  $.get(`/api/lab/head/${testId}`, function (data) {
    $("#editTestId").val(data.id);
    renderQuestions(data.questions || []);
    $("#editTestModal").fadeIn(200);
  });
});

// Закрыть модалку
$("#editCancelBtn").on("submit", function () {
  $("#editTestModal").fadeOut(200);
});

// Добавить новый вопрос
$("#add-question-btn").on("click", function () {
  const questionIndex = $(".question-block").length;
  $("#edit-question-container").append(createQuestionBlock(null, questionIndex));
});

// Удалить вопрос
$(document).on("click", ".remove-question", function () {
  $(this).closest(".question-block").remove();
});

// Добавить ответ
$(document).on("click", ".add-answer-btn", function () {
  const questionBlock = $(this).closest(".question-block");
  questionBlock.find(".answers-container").append(createAnswerItem());
});

// Удалить ответ
$(document).on("click", ".remove-answer", function () {
  $(this).closest(".answer-item").remove();
});

// Отметить правильный ответ
$(document).on("click", ".mark-correct", function () {
  $(this).toggleClass("selected");
});

// Сохранить изменения
$("#editSaveBtn").on("click", function (e) {
  e.preventDefault();
  const testId = $("#editTestId").val();
  const payload = {
    questions: []
  };

  $(".question-block").each(function () {
    const questionText = $(this).find(".question-text").val().trim();
    const questionId = $(this).data("id") || null;
    const answers = [];

    $(this).find(".answer-item").each(function () {
      const answerText = $(this).find(".answer-text").val().trim();
      const isCorrect = $(this).find(".mark-correct").hasClass("selected");
      const answerId = $(this).data("id") || null;

      if (answerText) {
        answers.push({ id: answerId, text: answerText, isCorrect });
      }
    });

    if (questionText && answers.length > 0) {
      payload.questions.push({
        id: questionId,
        text: questionText,
        answers
      });
    }
  });

  $.ajax({
    url: `/api/lab/head/${testId}`,
    type: "PUT",
    data: JSON.stringify(payload),
    contentType: "application/json",
    success: function () {
      $("#editTestModal").fadeOut(200);
      // обновить таблицу или уведомление
      location.reload();
    },
    error: function (err) {
      console.error(err);
      alert("Ошибка при сохранении");
    }
  });
});
function renderQuestions(questions) {
  $("#edit-question-container").empty();
  questions.forEach((question, index) => {
    $("#edit-question-container").append(createQuestionBlock(question, index));
  });
}

function createQuestionBlock(question = null, index = 0) {
  const qId = question?.id || '';
  const qText = question?.text || '';
  const block = $(`
    <div class="question-block" data-id="${qId}">
      <label>Вопрос ${index + 1}</label>
      <input type="text" class="question-text" placeholder="Введите текст вопроса" value="${qText}">
      <div class="answers-container"></div>
      <div class="question-actions">
        <button type="button" class="add-answer-btn">+ Ответ</button>
        <button type="button" class="remove-question">Удалить вопрос</button>
      </div>
    </div>
  `);

  const container = block.find(".answers-container");
  if (question?.answers?.length) {
    question.answers.forEach((ans) => {
      container.append(createAnswerItem(ans));
    });
  } else {
    container.append(createAnswerItem()); // хотя бы 1
  }

  return block;
}

function createAnswerItem(answer = null) {
  const aId = answer?.id || '';
  const aText = answer?.text || '';
  const isCorrect = answer?.isCorrect || false;

  const item = $(`
    <div class="answer-item" data-id="${aId}">
      <input type="text" class="answer-text" placeholder="Ответ" value="${aText}">
      <button type="button" class="mark-correct ${isCorrect ? 'selected' : ''}" title="Правильный ответ">
        <i class="fa fa-check"></i>
      </button>
      <button type="button" class="remove-answer" title="Удалить ответ">
        <i class="fa fa-trash"></i>
      </button>
    </div>
  `);
  return item;
}


    let formMode = 'add'; // 'add' | 'edit'
    let currentEntityType = null; // 'lecture' | 'user'
    let currentEditId = null;
  
  // Открытие модального окна с формой
  function openFormModal(entityType, entityData = null) {
    formMode = entityData ? 'edit' : 'add';
    currentEntityType = entityType;
    currentEditId = entityData?.id || null;
    console.log(entityData, 'data')
    $('#form-fields').empty();

    if (entityType === 'lecture') {
        $('#form-modal-title').text(formMode === 'edit' ? 'Редактировать лекцию' : 'Добавить лекцию');
        $('#form-fields').append(`
            <label>Название</label>
            <input type="text" name="title" required value="${entityData?.title || ''}">
            <label>Содержимое</label>
            <textarea name="content" required>${entityData?.content || ''}</textarea>
        `);
    } else if (entityType === 'user') {
        $('#form-modal-title').text(formMode === 'edit' ? 'Редактировать пользователя' : 'Добавить пользователя');
        $('#form-fields').append(`
            <label>Фамилия</label>
            <input type="text" name="surname" required value="${entityData?.surname || ''}">
            <label>Имя</label>
            <input type="text" name="name" required value="${entityData?.name || ''}">
            <label>Email</label>
            <input type="email" name="email" required value="${entityData?.email || ''}">
            <label>Телефон</label>
            <input type="text" name="phoneNumber" value="${entityData?.phoneNumber || ''}">
            <label>Дата рождения</label>
            <input type="date" name="birthDate" value="${entityData?.birthDate?.split('T')[0] || ''}">
            <label>Пол</label>
            <select name="gender">
              <option value="Мужской" ${entityData?.gender === 'Мужской' ? 'selected' : ''}>Мужской</option>
              <option value="Женский" ${entityData?.gender === 'Женский' ? 'selected' : ''}>Женский</option>
            </select>
            <label>Роль</label>
            <select name="role">
              <option value="user" ${entityData?.role === 'user' ? 'selected' : ''}>Пользователь</option>
              <option value="admin" ${entityData?.role === 'admin' ? 'selected' : ''}>Администратор</option>
            </select>
        `);
    }

    $('#form-modal').fadeIn();
}

    // Закрытие формы
    $('#form-cancel').on('click', () => {
      $('#form-modal').fadeOut();
      currentEditId = null;
    });

    // Сохранение формы (добавление или редактирование)
    $('#entity-form').on('submit', function (e) {
      console.log(currentEntityType,  formMode, 1)
      e.preventDefault();
      const formData = Object.fromEntries(new FormData(this).entries());
        console.log(formData, 'form data')

      let url = '';
      let method = formMode === 'edit' ? 'PUT' : 'POST';

      if (currentEntityType === 'lecture') {
        url = formMode === 'edit' ? `/api/lections/${currentEditId}` : '/api/lections/';
      } else if (currentEntityType === 'user') {
        url = formMode === 'edit' ? `/api/users/${currentEditId}` : '/api/users/';
      }else if (currentEntityType === 'test') {
        url = formMode === 'edit' ? `/api/lab/head${currentEditId}` : '/api/lab/head';
      }

      $.ajax({
        url,
        method,
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: () => {
          $('#form-modal').fadeOut();
          currentEditId = null;
          if (currentEntityType === 'lecture') loadLectures();
          else if (currentEntityType === 'user') loadUsers();
        },
        error: () => alert("Ошибка при сохранении.")
      });
    });

    // Получение данных для редактирования
    function editLecture(id) {
      $.get(`/api/lections/${id}`, data => openFormModal('lecture', data));
    }
    function editTest(id) {
      $.get(`/api/lab/OneHead/${id}`, data => openFormModal('test', data));
    }
    function editUser(id) {
     $.get(`/api/users/${id}`, data => openFormModal('user', data));
    }



    // Подтверждение и удаление сущностей
    let itemToDelete = { id: null, type: null };

    function confirmDelete(id, type) {
      itemToDelete = { id, type };
      const entityName = type === 'user' ? 'пользователя' : type === 'lecture' ? 'лекцию' : 'тест';
      $('#confirm-message').text(`Вы уверены, что хотите удалить ${entityName}?`);
      $('#confirm-modal').fadeIn();
    }

    $('#confirm-yes').on('click', function () {
      if (!itemToDelete.id || !itemToDelete.type) return;

      let url = '';
      switch (itemToDelete.type) {
        case 'user': url = `/api/users/${itemToDelete.id}`; break;
        case 'lecture': url = `/api/lections/${itemToDelete.id}`; break;
        case 'test': url = `/api/lab/head/${itemToDelete.id}`; break;
      }

      $.ajax({
        url,
        method: 'DELETE',
        success: () => {
          $('#confirm-modal').fadeOut();
          if (itemToDelete.type === 'user') loadUsers();
          else if (itemToDelete.type === 'lecture') loadLectures();
          else if (itemToDelete.type === 'test') loadTests();
          itemToDelete = { id: null, type: null };
        },
        error: () => {
          alert("Ошибка при удалении");
          $('#confirm-modal').fadeOut();
        }
      });
    });

    $('#confirm-no').on('click', function () {
      itemToDelete = { id: null, type: null };
      $('#confirm-modal').fadeOut();
    });



function loadStats() {
  // Загрузка детальной таблицы статистики
  $.get('/api/lab/user-stats', res => {
    const { tests, users, data } = res;

    // Заголовок таблицы
    let headerHtml = '<th>Пользователь</th>';
    tests.forEach(test => {
      headerHtml += `<th>${test}</th>`;
    });
    $('#stats-header').html(headerHtml);

    // Тело таблицы
    let bodyHtml = '';
    users.forEach(user => {
      let row = `<tr><td>${user}</td>`;
      tests.forEach(test => {
        const value = data[user] && data[user][test] ? data[user][test] : '-';
        row += `<td>${value}</td>`;
      });
      row += '</tr>';
      bodyHtml += row;
    });
    $('#stats-body').html(bodyHtml);
  });
}

    // Загрузка пользователей
    function loadUsers() {
      const tbody = $('#user-table tbody').empty();
      $.get('/api/users', data => {
        if (!Array.isArray(data) || data.length === 0) {
          tbody.append('<tr><td colspan="8">Нет пользователей.</td></tr>');
          return;
        }
        data.forEach(user => {
          const row = `
            <tr>
              <td>${user.id}</td>
              <td>${user.surname} ${user.name}</td>
              <td>${user.email}</td>
              <td>${user.phoneNumber}</td>
              <td>${new Date(user.birthDate).toLocaleDateString()}</td>
              <td>${user.gender}</td>
              <td>${user.role}</td>
              <td class="action-buttons">
                <button class="icon-button edit" onclick="editUser(${user.id})" title="Редактировать">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-button delete" onclick="confirmDelete(${user.id}, 'user')" title="Удалить">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
      });
    }

    // Загрузка лекций
    function loadLectures() {
      const tbody = $('#lecture-table tbody').empty();
      $.get('/api/lections', data => {
        if (!Array.isArray(data) || data.length === 0) {
          tbody.append('<tr><td colspan="5">Нет доступных лекций.</td></tr>');
          return;
        }
        data.forEach(lecture => {
          const row = `
            <tr>
              <td>${lecture.id}</td>
              <td>${lecture.title}</td>
              <td>${lecture.content || ''}</td>
              <td>${new Date(lecture.createdAt).toLocaleDateString()}</td>
              <td class="action-buttons">
                <button class="icon-button edit" onclick="editLecture(${lecture.id})" title="Редактировать">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-button delete" onclick="confirmDelete(${lecture.id}, 'lecture')" title="Удалить">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
      });
    }

    // Загрузка тестов
    function loadTests() {
      const tbody = $('#test-table tbody').empty();
      $.get('/api/lab/allHead', data => {
        if (!Array.isArray(data) || data.length === 0) {
          tbody.append('<tr><td colspan="3">Тесты не найдены.</td></tr>');
          return;
        }
        data.forEach(test => {
          const row = `
            <tr>
              <td>${test.id}</td>
              <td>${test.title}</td>
              <td class="action-buttons">
                <button class="icon-button edit" onclick="editTest(${test.id})" title="Редактировать">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-button delete" onclick="confirmDelete(${test.id}, 'test')" title="Удалить">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
      });
    }

    // Обработка выхода
    function handleLogout() {
      window.location.href = '/logout';
    }

    // Обработчики событий при загрузке страницы
    $(document).ready(() => {
      // Переключение между секциями
      $('.nav-btn').on('click', function () {
        const target = $(this).data('section');
        $('.nav-btn').removeClass('active');
        $(this).addClass('active');
        $('.section').hide();
        $('#' + target).show();

        if (target === 'lectures-section') loadLectures();
        else if (target === 'tests-section') loadTests();
        else if (target === 'stats-section') { loadStats();
        } else loadUsers();
      });

      // Кнопки добавления
      $('#add-lecture-btn').on('click', () => openFormModal('lecture'));
      $('#add-test-btn').on('click', () => openFormModal('test'));

      // Первая загрузка пользователей
      loadUsers();
    });
    
  </script>
</body>

