
<body>
  <!-- Шапка -->
  <header>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/modal.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  
    <div class="header-left-text">Админ-панель</div>
    <div class="header-right">
      <div class="user-avatar">
        <i class="fas fa-user"></i>
        <div class="site-header">{{user.dataValues.name}}</div>
      </div>
      <div class="logout-icon" onclick="handleLogout()" title="Выйти">
        <i class="fas fa-sign-out-alt"></i>
      </div>
    </div>
  </header>

  <!-- Кнопки переключения секций -->
  <div class="nav-buttons">
    <button class="nav-btn active" data-section="users-section">Пользователи</button>
    <button class="nav-btn" data-section="lectures-section">Лекции</button>
    <button class="nav-btn" data-section="tests-section">Тесты</button>
    <button class="nav-btn" data-section="stats-section">Статистика</button>
  </div>

  <!-- Контейнер для секций -->
  <div class="section-grid">

    <!-- Секция пользователей -->
    <div id="users-section" class="section active">
      <h2>Список пользователей</h2>
      <table id="user-table" class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>ФИО</th>
            <th>Email</th>
            <th>Телефон</th>
            <th>Дата рождения</th>
            <th>Пол</th>
            <th>Роль</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <!-- Секция лекций -->
    <div id="lectures-section" class="section" style="display: none;">
      <h2>Список лекций</h2>
      <table id="lecture-table" class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Заголовок</th>
            <th>Описание</th>
            <th>Дата создания</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>

      <!-- Кнопка добавить лекцию -->
      <div class="table-footer">
        <button id="add-lecture-btn" class="floating-add-btn">Добавить лекцию</button>
      </div>
    </div>

    <!-- Секция тестов -->
    <div id="tests-section" class="section" style="display: none;">
      <h2>Список тестов</h2>
      <table id="test-table" class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Заголовок</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>


      <!-- Кнопка добавить тест -->
      <div class="table-footer">
        <button id="add-test-btn" class="floating-add-btn">Добавить тест</button>
      </div>
    </div>


<!-- Секция статистики -->
<div id="stats-section" class="section" style="display: none;">
  <div>
    <h2>Статистика</h2>
    <table id="stats-table" class="user-table">
      <thead>
        <tr id="stats-header"></tr>
      </thead>
      <tbody id="stats-body"></tbody>
    </table>
  </div>
</div>

  <!-- Модальное окно формы -->
  <div id="form-modal" class="modal-overlay" style="display: none;">
    <div class="modal-window">
      <h3 id="form-modal-title">Форма</h3>
     <div class="modal-content">
        <form id="entity-form">
          <div id="form-fields"></div>
        </form>
     </div>
        <div class="modal-actions">
          <button type="submit" class="modal-btn primary">Сохранить</button>
          <button type="button" class="modal-btn" id="form-cancel">Отмена</button>
        </div>
    </div>
  </div>

  <!-- Модальное окно подтверждения удаления -->
  <div id="confirm-modal" class="modal-overlay" style="display: none;">
    <div class="modal-window">
      <p id="confirm-message">Вы уверены, что хотите удалить?</p>
      <div class="modal-actions">
        <button id="confirm-yes" class="modal-btn danger">Удалить</button>
        <button id="confirm-no" class="modal-btn">Отмена</button>
      </div>
    </div>
  </div>

  <!-- JS логика -->
  <script>
    let formMode = 'add'; // 'add' | 'edit'
    let currentEntityType = null; // 'lecture' | 'test'
    let currentEditId = null;

    // Открытие модального окна с формой
function openFormModal(entityType, entityData = null) {
    formMode = entityData ? 'edit' : 'add';
    currentEntityType = entityType;
    currentEditId = entityData?.id || null;
    $('#form-fields').empty();

    if (entityType === 'lecture') {
        $('#form-modal-title').text(formMode === 'edit' ? 'Редактировать лекцию' : 'Добавить лекцию');
        $('#form-fields').append(`
            <label>Название</label>
            <input type="text" name="title" required value="${entityData?.title || ''}">
            <label>Содержимое</label>
            <textarea name="content" required>${entityData?.content || ''}</textarea>
        `);
    } else if (entityType === 'test') {
    $('#form-modal-title').text(formMode === 'edit' ? 'Редактировать тест' : 'Добавить тест');

    let questionsHtml = '';
    if (formMode === 'edit' && entityData.lab_bodies) {
        entityData.lab_bodies.forEach((question, qIndex) => {
            let answersHtml = '';
            if (question.lab_answers && Array.isArray(question.lab_answers)) {
                answersHtml = question.lab_answers.map((ans, aIndex) => `
                    <div class="answer-item">
                        <input type="checkbox" 
                               name="answer-${question.id}-${ans.id}-correct" 
                               ${ans.check ? 'checked' : ''}>
                        <input type="text" name="answer-${question.id}-${ans.id}" value="${ans.title}">
                    </div>
                `).join('');
            }
            questionsHtml += `
                <div class="question-block">
                    <label>Вопрос ${qIndex + 1}</label>
                    <input type="text" name="question-${question.id}" value="${question.title}">
                    <div class="answer-block">${answersHtml}</div>
                </div>
            `;
        });
    }
    $('#form-fields').append(questionsHtml);
    // Добавление контейнера для динамического добавления вопросов и кнопки
    $('#form-fields').append('<div id="questions-container"></div>');
    $('#form-fields').append('<button type="button" id="add-question-btn">Добавить вопрос</button>');
    
    
    } else if (entityType === 'user') {
        $('#form-modal-title').text(formMode === 'edit' ? 'Редактировать пользователя' : 'Добавить пользователя');
        $('#form-fields').append(`
            <label>Фамилия</label>
            <input type="text" name="surname" required value="${entityData?.surname || ''}">
            <label>Имя</label>
            <input type="text" name="name" required value="${entityData?.name || ''}">
            <label>Email</label>
            <input type="email" name="email" required value="${entityData?.email || ''}">
            <label>Телефон</label>
            <input type="text" name="phoneNumber" value="${entityData?.phoneNumber || ''}">
            <label>Дата рождения</label>
            <input type="date" name="birthDate" value="${entityData?.birthDate?.split('T')[0] || ''}">
            <label>Пол</label>
            <select name="gender">
              <option value="Мужской" ${entityData?.gender === 'Мужской' ? 'selected' : ''}>Мужской</option>
              <option value="Женский" ${entityData?.gender === 'Женский' ? 'selected' : ''}>Женский</option>
            </select>
            <label>Роль</label>
            <select name="role">
              <option value="user" ${entityData?.role === 'user' ? 'selected' : ''}>Пользователь</option>
              <option value="admin" ${entityData?.role === 'admin' ? 'selected' : ''}>Администратор</option>
            </select>
        `);
    }

    $('#form-modal').fadeIn();
}

$(document).ready(function () {
    let questionCounter = 0;

    function createAnswerInput(questionIndex, answerIndex = '') {
        return `
            <div class="answer-item" data-answer-index="${answerIndex}" style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
                <input type="text" name="answer-${questionIndex}-${answerIndex}" placeholder="Введите ответ" class="answer-text" style="flex-grow: 1;">
                <button type="button" class="mark-correct" title="Отметить как правильный" style="border: none; background: none; color: green; font-size: 18px;">
                    <i class="fas fa-check"></i>
                </button>
                <button type="button" class="remove-answer" title="Удалить ответ" style="border: none; background: none; color: red; font-size: 18px;">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
    }

    function createQuestionBlock(index) {
        return `
            <div class="question-block" data-question-index="${index}" style="margin-bottom: 20px; border: 1px solid #ccc; padding: 10px;">
                <label>Вопрос ${index + 1}</label>
                <input type="text" name="question-${index}" placeholder="Введите вопрос" style="width: 100%; margin-bottom: 8px;">
                <div class="answer-block">
                    ${createAnswerInput(index, 0)}
                </div>
                <div class="question-actions" style="display: flex; justify-content: space-between; margin-top: 10px;">
                    <button type="button" class="add-answer-btn">Добавить ответ</button>
                    <button type="button" class="done-btn">Готово</button>
                </div>
            </div>
        `;
    }

    $(document).on('click', '#add-question-btn', function () {
        const block = createQuestionBlock(questionCounter++);
        $('#form-fields').append(block);
    });

    $(document).on('click', '.add-answer-btn', function () {
        const questionBlock = $(this).closest('.question-block');
        const qIndex = questionBlock.data('question-index');
        const answerBlock = questionBlock.find('.answer-block');
        const nextIndex = answerBlock.find('.answer-item').length;
        answerBlock.append(createAnswerInput(qIndex, nextIndex));
    });

    $(document).on('click', '.remove-answer', function () {
        const answerBlock = $(this).closest('.answer-block');
        if (answerBlock.find('.answer-item').length > 1) {
            $(this).closest('.answer-item').remove();
        } else {
            alert('Должен быть хотя бы один ответ');
        }
    });

    $(document).on('click', '.mark-correct', function () {
        // Один правильный ответ на вопрос
        $(this).closest('.answer-block').find('.mark-correct').removeClass('selected');
        $(this).addClass('selected');
    });

    $(document).on('click', '.done-btn', function () {
        const questionBlock = $(this).closest('.question-block');
        const questionText = questionBlock.find('input[name^="question-"]').val();
        const answers = [];
        questionBlock.find('.answer-item').each(function () {
            answers.push({
                text: $(this).find('.answer-text').val(),
                correct: $(this).find('.mark-correct').hasClass('selected')
            });
        });
        console.log({ question: questionText, answers });
        alert('Сохранено (смотри консоль)');
    });

    // Инициализация
    $('#form-fields').append('<button type="button" id="add-question-btn" style="width: 100%; margin-top: 10px;">Добавить вопрос</button>');
});


    // Закрытие формы
    $('#form-cancel').on('click', () => {
      $('#form-modal').fadeOut();
      currentEditId = null;
    });

    // Сохранение формы (добавление или редактирование)
    $('#entity-form').on('submit', function (e) {
      e.preventDefault();
      const formData = Object.fromEntries(new FormData(this).entries());

      let url = '';
      let method = formMode === 'edit' ? 'PUT' : 'POST';

      if (currentEntityType === 'lecture') {
        url = formMode === 'edit' ? `/api/lections/${currentEditId}` : '/api/lections/';
      } else if (currentEntityType === 'test') {
        url = formMode === 'edit' ? `/api/lab/head/${currentEditId}` : '/api/lab/head/';
      } else if (currentEntityType === 'user') {
        url = formMode === 'edit' ? `/api/users/${currentEditId}` : '/api/users/';
      }

      $.ajax({
        url,
        method,
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: () => {
          $('#form-modal').fadeOut();
          currentEditId = null;
          if (currentEntityType === 'lecture') loadLectures();
          else if (currentEntityType === 'test') loadTests();
          else if (currentEntityType === 'user') loadUsers();
        },
        error: () => alert("Ошибка при сохранении.")
      });
    });

    // Получение данных для редактирования
    function editLecture(id) {
      $.get(`/api/lections/${id}`, data => openFormModal('lecture', data));
    }

    function editTest(id) {
      $.get(`/api/lab/OneHead/${id}`, data => openFormModal('test', data));
    }
    function editUser(id) {
     $.get(`/api/users/${id}`, data => openFormModal('user', data));
    }



    // Подтверждение и удаление сущностей
    let itemToDelete = { id: null, type: null };

    function confirmDelete(id, type) {
      itemToDelete = { id, type };
      const entityName = type === 'user' ? 'пользователя' : type === 'lecture' ? 'лекцию' : 'тест';
      $('#confirm-message').text(`Вы уверены, что хотите удалить ${entityName}?`);
      $('#confirm-modal').fadeIn();
    }

    $('#confirm-yes').on('click', function () {
      if (!itemToDelete.id || !itemToDelete.type) return;

      let url = '';
      switch (itemToDelete.type) {
        case 'user': url = `/api/users/${itemToDelete.id}`; break;
        case 'lecture': url = `/api/lections/${itemToDelete.id}`; break;
        case 'test': url = `/api/lab/head/${itemToDelete.id}`; break;
      }

      $.ajax({
        url,
        method: 'DELETE',
        success: () => {
          $('#confirm-modal').fadeOut();
          if (itemToDelete.type === 'user') loadUsers();
          else if (itemToDelete.type === 'lecture') loadLectures();
          else if (itemToDelete.type === 'test') loadTests();
          itemToDelete = { id: null, type: null };
        },
        error: () => {
          alert("Ошибка при удалении");
          $('#confirm-modal').fadeOut();
        }
      });
    });

    $('#confirm-no').on('click', function () {
      itemToDelete = { id: null, type: null };
      $('#confirm-modal').fadeOut();
    });



function loadStats() {
  // Загрузка детальной таблицы статистики
  $.get('/api/lab/user-stats', res => {
    const { tests, users, data } = res;

    // Заголовок таблицы
    let headerHtml = '<th>Пользователь</th>';
    tests.forEach(test => {
      headerHtml += `<th>${test}</th>`;
    });
    $('#stats-header').html(headerHtml);

    // Тело таблицы
    let bodyHtml = '';
    users.forEach(user => {
      let row = `<tr><td>${user}</td>`;
      tests.forEach(test => {
        const value = data[user] && data[user][test] ? data[user][test] : '-';
        row += `<td>${value}</td>`;
      });
      row += '</tr>';
      bodyHtml += row;
    });
    $('#stats-body').html(bodyHtml);
  });
}

    // Загрузка пользователей
    function loadUsers() {
      const tbody = $('#user-table tbody').empty();
      $.get('/api/users', data => {
        if (!Array.isArray(data) || data.length === 0) {
          tbody.append('<tr><td colspan="8">Нет пользователей.</td></tr>');
          return;
        }
        data.forEach(user => {
          const row = `
            <tr>
              <td>${user.id}</td>
              <td>${user.surname} ${user.name}</td>
              <td>${user.email}</td>
              <td>${user.phoneNumber}</td>
              <td>${new Date(user.birthDate).toLocaleDateString()}</td>
              <td>${user.gender}</td>
              <td>${user.role}</td>
              <td class="action-buttons">
                <button class="icon-button edit" onclick="editUser(${user.id})" title="Редактировать">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-button delete" onclick="confirmDelete(${user.id}, 'user')" title="Удалить">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
      });
    }

    // Загрузка лекций
    function loadLectures() {
      const tbody = $('#lecture-table tbody').empty();
      $.get('/api/lections', data => {
        if (!Array.isArray(data) || data.length === 0) {
          tbody.append('<tr><td colspan="5">Нет доступных лекций.</td></tr>');
          return;
        }
        data.forEach(lecture => {
          const row = `
            <tr>
              <td>${lecture.id}</td>
              <td>${lecture.title}</td>
              <td>${lecture.content || ''}</td>
              <td>${new Date(lecture.createdAt).toLocaleDateString()}</td>
              <td class="action-buttons">
                <button class="icon-button edit" onclick="editLecture(${lecture.id})" title="Редактировать">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-button delete" onclick="confirmDelete(${lecture.id}, 'lecture')" title="Удалить">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
      });
    }

    // Загрузка тестов
    function loadTests() {
      const tbody = $('#test-table tbody').empty();
      $.get('/api/lab/allHead', data => {
        if (!Array.isArray(data) || data.length === 0) {
          tbody.append('<tr><td colspan="3">Тесты не найдены.</td></tr>');
          return;
        }
        data.forEach(test => {
          const row = `
            <tr>
              <td>${test.id}</td>
              <td>${test.title}</td>
              <td class="action-buttons">
                <button class="icon-button edit" onclick="editTest(${test.id})" title="Редактировать">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-button delete" onclick="confirmDelete(${test.id}, 'test')" title="Удалить">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
      });
    }

    // Обработка выхода
    function handleLogout() {
      window.location.href = '/logout';
    }

    // Обработчики событий при загрузке страницы
    $(document).ready(() => {
      // Переключение между секциями
      $('.nav-btn').on('click', function () {
        const target = $(this).data('section');
        $('.nav-btn').removeClass('active');
        $(this).addClass('active');
        $('.section').hide();
        $('#' + target).show();

        if (target === 'lectures-section') loadLectures();
        else if (target === 'tests-section') loadTests();
        else if (target === 'stats-section') { loadStats();
        } else loadUsers();
      });

      // Кнопки добавления
      $('#add-lecture-btn').on('click', () => openFormModal('lecture'));
      $('#add-test-btn').on('click', () => openFormModal('test'));

      // Первая загрузка пользователей
      loadUsers();
    });
    
  </script>

</body>

